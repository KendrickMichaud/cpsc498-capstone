/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.character_sheet;

import app.AppManager;
import app.Support;
import gui.util.CARD_NAME;
import gui.util.KEY;
import gui.character_builder.BuilderFrame;
import gui.util.CheckBoxListener;
import gui.util.ComboItemListener;
import gui.util.Deck;
import gui.util.TextFocusListener;
import java.awt.Image;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.JTextComponent;
import gui.util.Ability;
import app.Bundle;
import app.DataIntegrity;
import gui.util.SwingHelper;

/**
 *
 * @author Kendrick
 */
public class CharacterFrame extends javax.swing.JFrame {
    private WeaponDeck offense;
    private AppManager manager;
    private Deck defense;
    private Deck skillsProfs;
    private File associatedFile;
    private SpellbookFrame spellbook;
    private InventoryFrame inventory;
    private BackgroundFrame background;
    /**
     * Creates new form CharacterFrame
     * @param manager
     */
    public CharacterFrame(AppManager manager) {
        if(manager == null){
            throw new NullPointerException("AppManager must not be null");
        }
        this.manager = manager;
        initComponents();
        initCardsForWeapons();
        initCardsForDefense();
        initCardsForSkillsProfs();
        initCardsForSpellsInventory();
        initComponentsForUserInterfacing();
        spellbook = new SpellbookFrame();
        inventory = new InventoryFrame();
        background = new BackgroundFrame();
        inventory.setLimit(Integer.parseInt(extractString(txt_strength)));
        combo_level.addItemListener(new ComboItemListener(manager));
        SwingHelper.addTabFocusChanger(txt_area_feats);
        SwingHelper.wrapWord(txt_area_feats);
        BufferedImage img;
        try {
            img = ImageIO.read(new File(getClass().getResource("/img/icon_logo.jpg").getPath()));
            setIconImage(img);
        } catch (IOException ex) {
            Logger.getLogger(CharacterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {

            }

            @Override
            public void windowClosing(WindowEvent e) {
                if(manager.authorizedToExit()){
                    manager.close();
                }
            }

            @Override
            public void windowClosed(WindowEvent e) {
            }

            @Override
            public void windowIconified(WindowEvent e) {
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
            }

            @Override
            public void windowActivated(WindowEvent e) {
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
            }
        });
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        pan_main = new javax.swing.JPanel();
        pan_charInfo = new javax.swing.JPanel();
        lbl_charInfo = new javax.swing.JLabel();
        bdy_charInfo = new javax.swing.JPanel();
        pan_photo = new javax.swing.JPanel();
        lbl_characterImage = new javax.swing.JLabel();
        pan_biography = new javax.swing.JPanel();
        lbl_charName = new javax.swing.JLabel();
        txt_charName = new javax.swing.JTextField();
        lbl_className = new javax.swing.JLabel();
        txt_class = new javax.swing.JTextField();
        lbl_raceName = new javax.swing.JLabel();
        txt_race = new javax.swing.JTextField();
        lbl_charSize = new javax.swing.JLabel();
        txt_size = new javax.swing.JTextField();
        lbl_charWeight = new javax.swing.JLabel();
        txt_charWeight = new javax.swing.JTextField();
        lbl_charHeight = new javax.swing.JLabel();
        txt_charHeight = new javax.swing.JTextField();
        lbl_deity = new javax.swing.JLabel();
        txt_deity = new javax.swing.JTextField();
        lbl_alignment = new javax.swing.JLabel();
        txt_alignment = new javax.swing.JTextField();
        lbl_level = new javax.swing.JLabel();
        combo_level = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        open_inventory = new javax.swing.JLabel();
        open_spellbook = new javax.swing.JLabel();
        open_background = new javax.swing.JLabel();
        pan_attributes = new javax.swing.JPanel();
        lbl_panAttributes = new javax.swing.JLabel();
        bdy_attributes = new javax.swing.JPanel();
        pan_strength = new javax.swing.JPanel();
        lbl_strengthTitle = new javax.swing.JLabel();
        pan_strBody = new javax.swing.JPanel();
        txt_strength = new javax.swing.JTextField();
        lbl_strengthModifierTitle = new javax.swing.JLabel();
        lbl_strengthModifier = new javax.swing.JLabel();
        chk_str_prof = new javax.swing.JCheckBox();
        prof_str_save = new javax.swing.JLabel();
        pan_dexterity = new javax.swing.JPanel();
        lbl_dexterityTitle = new javax.swing.JLabel();
        pan_dexBody = new javax.swing.JPanel();
        txt_dexterity = new javax.swing.JTextField();
        lbl_dexterityModifierTitle = new javax.swing.JLabel();
        lbl_dexterityModifier = new javax.swing.JLabel();
        chk_dex_prof = new javax.swing.JCheckBox();
        prof_dex_save = new javax.swing.JLabel();
        pan_constituion = new javax.swing.JPanel();
        lbl_constitutionTitle = new javax.swing.JLabel();
        pan_conBody = new javax.swing.JPanel();
        txt_constitution = new javax.swing.JTextField();
        lbl_constitutionModifierTitle = new javax.swing.JLabel();
        lbl_constitutionModifier = new javax.swing.JLabel();
        chk_con_prof = new javax.swing.JCheckBox();
        prof_con_save = new javax.swing.JLabel();
        pan_intelligence = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        txt_intelligence = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        lbl_intelligence_modifier = new javax.swing.JLabel();
        chk_int_prof = new javax.swing.JCheckBox();
        prof_intel_save = new javax.swing.JLabel();
        pan_wisdom = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        txt_wisdom = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        lbl_wisdom_modifier = new javax.swing.JLabel();
        chk_wis_prof = new javax.swing.JCheckBox();
        prof_wis_save = new javax.swing.JLabel();
        pan_charisma = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        txt_charisma = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        lbl_charisma_modifier = new javax.swing.JLabel();
        chk_cha_prof = new javax.swing.JCheckBox();
        prof_cha_save = new javax.swing.JLabel();
        pan_combat = new javax.swing.JPanel();
        lbl_panCombat = new javax.swing.JLabel();
        pan_combatBody = new javax.swing.JPanel();
        pan_offense = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbl_weapon_title = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        deck_weapons = new javax.swing.JPanel();
        pan_defense = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        defense_title = new javax.swing.JPanel();
        defense_switch_right = new javax.swing.JButton();
        defense_switch_left = new javax.swing.JButton();
        lbl_deck_defense_name = new javax.swing.JLabel();
        deck_defense = new javax.swing.JPanel();
        pan_utility = new javax.swing.JPanel();
        lbl_util_title = new javax.swing.JLabel();
        pan_util_body = new javax.swing.JPanel();
        pan_speed = new javax.swing.JPanel();
        lbl_speed_name = new javax.swing.JLabel();
        lbl_speed_base_title = new javax.swing.JLabel();
        lbl_plus_sign = new javax.swing.JLabel();
        lbl_speed_bonus_title = new javax.swing.JLabel();
        lbl_speed_total = new javax.swing.JLabel();
        lbl_speed_base = new javax.swing.JLabel();
        lbl_plus_sign2 = new javax.swing.JLabel();
        txt_speed_bonus = new javax.swing.JTextField();
        pan_pass_perception = new javax.swing.JPanel();
        lbl_passive_perception_name = new javax.swing.JLabel();
        lbl_passive_perception = new javax.swing.JLabel();
        pan_initiative = new javax.swing.JPanel();
        lbl_init_name = new javax.swing.JLabel();
        lbl_dex_bonus_title = new javax.swing.JLabel();
        lbl_plus_sign_3 = new javax.swing.JLabel();
        lbl_init_bonus_title = new javax.swing.JLabel();
        lbl_init_total = new javax.swing.JLabel();
        lbl_init_dex_bonus = new javax.swing.JLabel();
        lbl_plus_sign4 = new javax.swing.JLabel();
        txt_init_bonus = new javax.swing.JTextField();
        pan_health = new javax.swing.JPanel();
        lbl_health_title = new javax.swing.JLabel();
        pan_health_body = new javax.swing.JPanel();
        lbl_health_points_title = new javax.swing.JLabel();
        txt_health_points = new javax.swing.JTextField();
        lbl_hit_die_title = new javax.swing.JLabel();
        txt_hit_die = new javax.swing.JTextField();
        pan_skills = new javax.swing.JPanel();
        lbl_panSkillsProfs = new javax.swing.JLabel();
        bdy_skills_swap = new javax.swing.JPanel();
        lbl_currSkilsProfsName = new javax.swing.JLabel();
        btn_skills_right = new javax.swing.JButton();
        btn_skills_left = new javax.swing.JButton();
        deck_skillsProfs = new javax.swing.JPanel();
        pan_features = new javax.swing.JPanel();
        lbl_panFeatures = new javax.swing.JLabel();
        bdy_features = new javax.swing.JPanel();
        scroll_feat = new javax.swing.JScrollPane();
        txt_area_feats = new javax.swing.JTextArea();
        menu_bar = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        item_new = new javax.swing.JMenuItem();
        item_open = new javax.swing.JMenuItem();
        item_save = new javax.swing.JMenuItem();
        action_save_as = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        menu_tools = new javax.swing.JMenu();
        item_options = new javax.swing.JMenuItem();
        menu_help = new javax.swing.JMenu();
        item_about = new javax.swing.JMenuItem();
        item_support = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("5EMaker");
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setPreferredSize(new java.awt.Dimension(819, 600));

        pan_main.setBackground(new java.awt.Color(0, 51, 102));
        pan_main.setMaximumSize(new java.awt.Dimension(800, 1200));
        pan_main.setMinimumSize(new java.awt.Dimension(800, 1190));
        pan_main.setPreferredSize(new java.awt.Dimension(700, 916));
        pan_main.setRequestFocusEnabled(false);

        pan_charInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pan_charInfo.setMaximumSize(new java.awt.Dimension(200, 420));
        pan_charInfo.setLayout(new java.awt.BorderLayout());

        lbl_charInfo.setBackground(new java.awt.Color(255, 204, 0));
        lbl_charInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_charInfo.setText("Character Information");
        lbl_charInfo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbl_charInfo.setOpaque(true);
        lbl_charInfo.setPreferredSize(new java.awt.Dimension(120, 18));
        pan_charInfo.add(lbl_charInfo, java.awt.BorderLayout.PAGE_START);

        pan_photo.setLayout(new java.awt.BorderLayout());

        lbl_characterImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_characterImage.setText("Set Your Character Photo...");
        lbl_characterImage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbl_characterImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_characterImageMouseClicked(evt);
            }
        });
        pan_photo.add(lbl_characterImage, java.awt.BorderLayout.CENTER);

        pan_biography.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pan_biography.setLayout(new java.awt.GridLayout(9, 2, -72, 0));

        lbl_charName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_charName.setText(" Name");
        lbl_charName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        pan_biography.add(lbl_charName);

        txt_charName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pan_biography.add(txt_charName);

        lbl_className.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_className.setText(" Class");
        lbl_className.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        pan_biography.add(lbl_className);

        txt_class.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pan_biography.add(txt_class);

        lbl_raceName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_raceName.setText(" Race");
        lbl_raceName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        pan_biography.add(lbl_raceName);

        txt_race.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pan_biography.add(txt_race);

        lbl_charSize.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_charSize.setText(" Size");
        lbl_charSize.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        pan_biography.add(lbl_charSize);

        txt_size.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pan_biography.add(txt_size);

        lbl_charWeight.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_charWeight.setText(" Weight");
        lbl_charWeight.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        pan_biography.add(lbl_charWeight);

        txt_charWeight.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pan_biography.add(txt_charWeight);

        lbl_charHeight.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_charHeight.setText(" Height");
        lbl_charHeight.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        pan_biography.add(lbl_charHeight);

        txt_charHeight.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pan_biography.add(txt_charHeight);

        lbl_deity.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_deity.setText(" Deity");
        lbl_deity.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        pan_biography.add(lbl_deity);

        txt_deity.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pan_biography.add(txt_deity);

        lbl_alignment.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_alignment.setText(" Alignment");
        lbl_alignment.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        pan_biography.add(lbl_alignment);

        txt_alignment.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pan_biography.add(txt_alignment);

        lbl_level.setText(" Level");
        pan_biography.add(lbl_level);

        combo_level.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        combo_level.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_levelItemStateChanged(evt);
            }
        });
        combo_level.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_levelActionPerformed(evt);
            }
        });
        pan_biography.add(combo_level);

        javax.swing.GroupLayout bdy_charInfoLayout = new javax.swing.GroupLayout(bdy_charInfo);
        bdy_charInfo.setLayout(bdy_charInfoLayout);
        bdy_charInfoLayout.setHorizontalGroup(
            bdy_charInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pan_photo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(pan_biography, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        bdy_charInfoLayout.setVerticalGroup(
            bdy_charInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bdy_charInfoLayout.createSequentialGroup()
                .addComponent(pan_photo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pan_biography, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pan_charInfo.add(bdy_charInfo, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(1, 3));

        open_inventory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        open_inventory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ico_bag.png"))); // NOI18N
        open_inventory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        open_inventory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                open_inventoryMouseClicked(evt);
            }
        });
        jPanel1.add(open_inventory);

        open_spellbook.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        open_spellbook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/spellbook.png"))); // NOI18N
        open_spellbook.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        open_spellbook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                open_spellbookMouseClicked(evt);
            }
        });
        jPanel1.add(open_spellbook);

        open_background.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        open_background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icon_person.png"))); // NOI18N
        open_background.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        open_background.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                open_backgroundMouseClicked(evt);
            }
        });
        jPanel1.add(open_background);

        pan_charInfo.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pan_attributes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pan_attributes.setMaximumSize(new java.awt.Dimension(550, 150));
        pan_attributes.setLayout(new java.awt.BorderLayout());

        lbl_panAttributes.setBackground(new java.awt.Color(255, 204, 0));
        lbl_panAttributes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_panAttributes.setText("Attributes");
        lbl_panAttributes.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbl_panAttributes.setOpaque(true);
        pan_attributes.add(lbl_panAttributes, java.awt.BorderLayout.PAGE_START);

        bdy_attributes.setLayout(new java.awt.GridLayout(1, 6));

        pan_strength.setLayout(new java.awt.GridLayout(6, 1));

        lbl_strengthTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_strengthTitle.setText("Strength");
        pan_strength.add(lbl_strengthTitle);

        pan_strBody.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        txt_strength.setColumns(4);
        txt_strength.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_strength.setText("10");
        pan_strBody.add(txt_strength);

        pan_strength.add(pan_strBody);

        lbl_strengthModifierTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_strengthModifierTitle.setText("Modifier");
        pan_strength.add(lbl_strengthModifierTitle);

        lbl_strengthModifier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_strengthModifier.setText("+0");
        pan_strength.add(lbl_strengthModifier);

        chk_str_prof.setText("Save Prof");
        pan_strength.add(chk_str_prof);

        prof_str_save.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        prof_str_save.setText("+0");
        pan_strength.add(prof_str_save);

        bdy_attributes.add(pan_strength);

        pan_dexterity.setLayout(new java.awt.GridLayout(6, 0));

        lbl_dexterityTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_dexterityTitle.setText("Dexterity");
        pan_dexterity.add(lbl_dexterityTitle);

        pan_dexBody.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        txt_dexterity.setColumns(4);
        txt_dexterity.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_dexterity.setText("10");
        pan_dexBody.add(txt_dexterity);

        pan_dexterity.add(pan_dexBody);

        lbl_dexterityModifierTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_dexterityModifierTitle.setText("Modifier");
        pan_dexterity.add(lbl_dexterityModifierTitle);

        lbl_dexterityModifier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_dexterityModifier.setText("+0");
        pan_dexterity.add(lbl_dexterityModifier);

        chk_dex_prof.setText("Save Prof");
        pan_dexterity.add(chk_dex_prof);

        prof_dex_save.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        prof_dex_save.setText("+0");
        pan_dexterity.add(prof_dex_save);

        bdy_attributes.add(pan_dexterity);

        pan_constituion.setLayout(new java.awt.GridLayout(6, 3));

        lbl_constitutionTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_constitutionTitle.setText("Constituion");
        pan_constituion.add(lbl_constitutionTitle);

        pan_conBody.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        txt_constitution.setColumns(4);
        txt_constitution.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_constitution.setText("10");
        pan_conBody.add(txt_constitution);

        pan_constituion.add(pan_conBody);

        lbl_constitutionModifierTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_constitutionModifierTitle.setText("Modifier");
        pan_constituion.add(lbl_constitutionModifierTitle);

        lbl_constitutionModifier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_constitutionModifier.setText("+0");
        pan_constituion.add(lbl_constitutionModifier);

        chk_con_prof.setText("Save Prof");
        pan_constituion.add(chk_con_prof);

        prof_con_save.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        prof_con_save.setText("+0");
        pan_constituion.add(prof_con_save);

        bdy_attributes.add(pan_constituion);

        pan_intelligence.setLayout(new java.awt.GridLayout(6, 3));

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Intelligence");
        pan_intelligence.add(jLabel13);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        txt_intelligence.setColumns(4);
        txt_intelligence.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_intelligence.setText("10");
        jPanel13.add(txt_intelligence);

        pan_intelligence.add(jPanel13);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Modifier");
        pan_intelligence.add(jLabel14);

        lbl_intelligence_modifier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_intelligence_modifier.setText("+0");
        pan_intelligence.add(lbl_intelligence_modifier);

        chk_int_prof.setText("Save Prof");
        pan_intelligence.add(chk_int_prof);

        prof_intel_save.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        prof_intel_save.setText("+0");
        pan_intelligence.add(prof_intel_save);

        bdy_attributes.add(pan_intelligence);

        pan_wisdom.setLayout(new java.awt.GridLayout(6, 3));

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Wisdom");
        pan_wisdom.add(jLabel16);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        txt_wisdom.setColumns(4);
        txt_wisdom.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_wisdom.setText("10");
        txt_wisdom.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel15.add(txt_wisdom);

        pan_wisdom.add(jPanel15);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Modifier");
        pan_wisdom.add(jLabel17);

        lbl_wisdom_modifier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_wisdom_modifier.setText("+0");
        pan_wisdom.add(lbl_wisdom_modifier);

        chk_wis_prof.setText("Save Prof");
        pan_wisdom.add(chk_wis_prof);

        prof_wis_save.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        prof_wis_save.setText("+0");
        pan_wisdom.add(prof_wis_save);

        bdy_attributes.add(pan_wisdom);

        pan_charisma.setLayout(new java.awt.GridLayout(6, 3));

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Charisma");
        pan_charisma.add(jLabel19);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        txt_charisma.setColumns(4);
        txt_charisma.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_charisma.setText("10");
        jPanel17.add(txt_charisma);

        pan_charisma.add(jPanel17);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Modifier");
        pan_charisma.add(jLabel20);

        lbl_charisma_modifier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_charisma_modifier.setText("+0");
        pan_charisma.add(lbl_charisma_modifier);

        chk_cha_prof.setText("Save Prof");
        pan_charisma.add(chk_cha_prof);

        prof_cha_save.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        prof_cha_save.setText("+0");
        pan_charisma.add(prof_cha_save);

        bdy_attributes.add(pan_charisma);

        pan_attributes.add(bdy_attributes, java.awt.BorderLayout.CENTER);

        pan_combat.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pan_combat.setMaximumSize(new java.awt.Dimension(550, 260));
        pan_combat.setLayout(new java.awt.BorderLayout());

        lbl_panCombat.setBackground(new java.awt.Color(255, 204, 0));
        lbl_panCombat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_panCombat.setText("Combat & Utility");
        lbl_panCombat.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lbl_panCombat.setOpaque(true);
        pan_combat.add(lbl_panCombat, java.awt.BorderLayout.PAGE_START);

        pan_combatBody.setLayout(new java.awt.GridLayout(1, 3));

        pan_offense.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        lbl_weapon_title.setBackground(new java.awt.Color(204, 204, 204));
        lbl_weapon_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_weapon_title.setText("Weapon 1");
        lbl_weapon_title.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbl_weapon_title.setOpaque(true);
        jPanel2.add(lbl_weapon_title, java.awt.BorderLayout.CENTER);

        jButton1.setText(">");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, java.awt.BorderLayout.LINE_END);

        jButton2.setText("<");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, java.awt.BorderLayout.LINE_START);

        jPanel4.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        deck_weapons.setLayout(new java.awt.CardLayout());
        jPanel4.add(deck_weapons, java.awt.BorderLayout.CENTER);

        pan_offense.add(jPanel4, java.awt.BorderLayout.CENTER);

        pan_combatBody.add(pan_offense);

        pan_defense.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new java.awt.BorderLayout());

        defense_title.setLayout(new java.awt.BorderLayout());

        defense_switch_right.setText(">");
        defense_switch_right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defense_switch_rightActionPerformed(evt);
            }
        });
        defense_title.add(defense_switch_right, java.awt.BorderLayout.LINE_END);

        defense_switch_left.setText("<");
        defense_switch_left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defense_switch_leftActionPerformed(evt);
            }
        });
        defense_title.add(defense_switch_left, java.awt.BorderLayout.LINE_START);

        lbl_deck_defense_name.setBackground(new java.awt.Color(204, 204, 204));
        lbl_deck_defense_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_deck_defense_name.setText("Defense");
        lbl_deck_defense_name.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbl_deck_defense_name.setOpaque(true);
        defense_title.add(lbl_deck_defense_name, java.awt.BorderLayout.CENTER);

        jPanel3.add(defense_title, java.awt.BorderLayout.PAGE_START);

        deck_defense.setLayout(new java.awt.CardLayout());
        jPanel3.add(deck_defense, java.awt.BorderLayout.CENTER);

        pan_defense.add(jPanel3, java.awt.BorderLayout.CENTER);

        pan_combatBody.add(pan_defense);

        pan_utility.setLayout(new java.awt.BorderLayout());

        lbl_util_title.setBackground(new java.awt.Color(204, 204, 204));
        lbl_util_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_util_title.setText("Utility and Survival");
        lbl_util_title.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbl_util_title.setOpaque(true);
        pan_utility.add(lbl_util_title, java.awt.BorderLayout.PAGE_START);

        pan_util_body.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pan_util_body.setLayout(new javax.swing.BoxLayout(pan_util_body, javax.swing.BoxLayout.Y_AXIS));

        pan_speed.setLayout(new java.awt.GridLayout(2, 4));

        lbl_speed_name.setText("Speed ");
        pan_speed.add(lbl_speed_name);

        lbl_speed_base_title.setText("= Base");
        pan_speed.add(lbl_speed_base_title);

        lbl_plus_sign.setText("+");
        pan_speed.add(lbl_plus_sign);

        lbl_speed_bonus_title.setText("Bonus");
        pan_speed.add(lbl_speed_bonus_title);

        lbl_speed_total.setText("30");
        pan_speed.add(lbl_speed_total);

        lbl_speed_base.setText("30");
        pan_speed.add(lbl_speed_base);

        lbl_plus_sign2.setText("+");
        pan_speed.add(lbl_plus_sign2);

        txt_speed_bonus.setText("0");
        txt_speed_bonus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_speed_bonusActionPerformed(evt);
            }
        });
        pan_speed.add(txt_speed_bonus);

        pan_util_body.add(pan_speed);

        pan_pass_perception.setLayout(new java.awt.BorderLayout());

        lbl_passive_perception_name.setText("Passive Perception");
        pan_pass_perception.add(lbl_passive_perception_name, java.awt.BorderLayout.LINE_START);

        lbl_passive_perception.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_passive_perception.setText("10");
        pan_pass_perception.add(lbl_passive_perception, java.awt.BorderLayout.CENTER);

        pan_util_body.add(pan_pass_perception);

        pan_initiative.setLayout(new java.awt.GridLayout(2, 4));

        lbl_init_name.setText("Init");
        pan_initiative.add(lbl_init_name);

        lbl_dex_bonus_title.setText("= Dex");
        pan_initiative.add(lbl_dex_bonus_title);

        lbl_plus_sign_3.setText("+");
        pan_initiative.add(lbl_plus_sign_3);

        lbl_init_bonus_title.setText("Bonus");
        pan_initiative.add(lbl_init_bonus_title);

        lbl_init_total.setText("0");
        pan_initiative.add(lbl_init_total);

        lbl_init_dex_bonus.setText("0");
        pan_initiative.add(lbl_init_dex_bonus);

        lbl_plus_sign4.setText("+");
        pan_initiative.add(lbl_plus_sign4);

        txt_init_bonus.setText("0");
        txt_init_bonus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_init_bonusActionPerformed(evt);
            }
        });
        pan_initiative.add(txt_init_bonus);

        pan_util_body.add(pan_initiative);

        pan_health.setLayout(new java.awt.BorderLayout());

        lbl_health_title.setBackground(new java.awt.Color(204, 204, 204));
        lbl_health_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_health_title.setText("Health");
        lbl_health_title.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbl_health_title.setOpaque(true);
        pan_health.add(lbl_health_title, java.awt.BorderLayout.PAGE_START);

        pan_health_body.setLayout(new java.awt.GridLayout(2, 2));

        lbl_health_points_title.setText("Health Points");
        pan_health_body.add(lbl_health_points_title);

        txt_health_points.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_health_pointsActionPerformed(evt);
            }
        });
        pan_health_body.add(txt_health_points);

        lbl_hit_die_title.setText("Hit Die");
        pan_health_body.add(lbl_hit_die_title);
        pan_health_body.add(txt_hit_die);

        pan_health.add(pan_health_body, java.awt.BorderLayout.CENTER);

        pan_util_body.add(pan_health);

        pan_utility.add(pan_util_body, java.awt.BorderLayout.CENTER);

        pan_combatBody.add(pan_utility);

        pan_combat.add(pan_combatBody, java.awt.BorderLayout.CENTER);

        pan_skills.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pan_skills.setMaximumSize(new java.awt.Dimension(200, 420));
        pan_skills.setLayout(new java.awt.BorderLayout());

        lbl_panSkillsProfs.setBackground(new java.awt.Color(255, 204, 0));
        lbl_panSkillsProfs.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_panSkillsProfs.setText("Skills & Proficiencies");
        lbl_panSkillsProfs.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbl_panSkillsProfs.setOpaque(true);
        pan_skills.add(lbl_panSkillsProfs, java.awt.BorderLayout.PAGE_START);

        bdy_skills_swap.setLayout(new java.awt.BorderLayout());

        lbl_currSkilsProfsName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_currSkilsProfsName.setText("Current Panel: Skills");
        lbl_currSkilsProfsName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bdy_skills_swap.add(lbl_currSkilsProfsName, java.awt.BorderLayout.CENTER);

        btn_skills_right.setText(">");
        btn_skills_right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_skills_rightActionPerformed(evt);
            }
        });
        bdy_skills_swap.add(btn_skills_right, java.awt.BorderLayout.LINE_END);

        btn_skills_left.setText("<");
        btn_skills_left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_skills_leftActionPerformed(evt);
            }
        });
        bdy_skills_swap.add(btn_skills_left, java.awt.BorderLayout.LINE_START);

        pan_skills.add(bdy_skills_swap, java.awt.BorderLayout.PAGE_END);

        deck_skillsProfs.setLayout(new java.awt.CardLayout());
        pan_skills.add(deck_skillsProfs, java.awt.BorderLayout.CENTER);

        pan_features.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pan_features.setMaximumSize(new java.awt.Dimension(550, 420));
        pan_features.setLayout(new java.awt.BorderLayout());

        lbl_panFeatures.setBackground(new java.awt.Color(255, 204, 0));
        lbl_panFeatures.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_panFeatures.setText("Feats, Class Features, Race Features");
        lbl_panFeatures.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lbl_panFeatures.setName(""); // NOI18N
        lbl_panFeatures.setOpaque(true);
        pan_features.add(lbl_panFeatures, java.awt.BorderLayout.PAGE_START);

        bdy_features.setLayout(new java.awt.BorderLayout());

        txt_area_feats.setColumns(20);
        txt_area_feats.setLineWrap(true);
        txt_area_feats.setRows(5);
        scroll_feat.setViewportView(txt_area_feats);

        bdy_features.add(scroll_feat, java.awt.BorderLayout.CENTER);

        pan_features.add(bdy_features, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout pan_mainLayout = new javax.swing.GroupLayout(pan_main);
        pan_main.setLayout(pan_mainLayout);
        pan_mainLayout.setHorizontalGroup(
            pan_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_mainLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pan_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pan_mainLayout.createSequentialGroup()
                        .addComponent(pan_charInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(pan_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pan_attributes, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pan_combat, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pan_mainLayout.createSequentialGroup()
                        .addComponent(pan_skills, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(pan_features, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        pan_mainLayout.setVerticalGroup(
            pan_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_mainLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pan_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pan_charInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pan_mainLayout.createSequentialGroup()
                        .addComponent(pan_attributes, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(pan_combat, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(pan_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pan_skills, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pan_features, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(318, 318, 318))
        );

        scrollPane.setViewportView(pan_main);

        getContentPane().add(scrollPane, java.awt.BorderLayout.CENTER);

        menu_file.setText("File");

        item_new.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        item_new.setText("New...");
        item_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_newActionPerformed(evt);
            }
        });
        menu_file.add(item_new);

        item_open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        item_open.setText("Open...");
        item_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_openActionPerformed(evt);
            }
        });
        menu_file.add(item_open);

        item_save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        item_save.setText("Save...");
        item_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_saveActionPerformed(evt);
            }
        });
        menu_file.add(item_save);

        action_save_as.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        action_save_as.setText("Save As...");
        action_save_as.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                action_save_asActionPerformed(evt);
            }
        });
        menu_file.add(action_save_as);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Main Menu...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menu_file.add(jMenuItem1);

        menu_bar.add(menu_file);

        menu_tools.setText("Tools");

        item_options.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        item_options.setText("Builder");
        item_options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_optionsActionPerformed(evt);
            }
        });
        menu_tools.add(item_options);

        menu_bar.add(menu_tools);

        menu_help.setText("Help");

        item_about.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        item_about.setText("About...");
        menu_help.add(item_about);

        item_support.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        item_support.setText("Support");
        item_support.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_supportActionPerformed(evt);
            }
        });
        menu_help.add(item_support);

        menu_bar.add(menu_help);

        setJMenuBar(menu_bar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void item_optionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_optionsActionPerformed
        if(manager.authorizedToExit()){
            manager.startUpBuilderFrame();
        }
    }//GEN-LAST:event_item_optionsActionPerformed

    private void item_supportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_supportActionPerformed
        JOptionPane.showMessageDialog(pan_combat, new JLabel(Support.getContactInformation()));
    }//GEN-LAST:event_item_supportActionPerformed

    private void item_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_newActionPerformed
        if(manager.authorizedToExit()){
            manager.reinitializeEnvironment();
        }
    }//GEN-LAST:event_item_newActionPerformed

    private void item_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_openActionPerformed
        if(manager.authorizedToExit()){
            try {
                File file = manager.getFileToOpen();
                if(file != null){
                    manager.reinitializeEnvironment(file);
                }
            } catch (IOException ex) {
                Logger.getLogger(CharacterFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_item_openActionPerformed

    private void item_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_saveActionPerformed
        if(associatedFile == null){
            associatedFile = saveAs();
        }
        
        if(associatedFile != null){
            setTitle(associatedFile.getName());
            save();
        }
    }//GEN-LAST:event_item_saveActionPerformed

    private void action_save_asActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_action_save_asActionPerformed
        associatedFile = saveAs();
        if(associatedFile != null){
            setTitle(associatedFile.getName());
            save();
        }
    }//GEN-LAST:event_action_save_asActionPerformed

    private void btn_skills_leftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_skills_leftActionPerformed
        skillsProfs.previousCard();
        lbl_currSkilsProfsName.setText(skillsProfs.getCardName());
    }//GEN-LAST:event_btn_skills_leftActionPerformed

    private void btn_skills_rightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_skills_rightActionPerformed
        skillsProfs.nextCard();
        lbl_currSkilsProfsName.setText(skillsProfs.getCardName());
    }//GEN-LAST:event_btn_skills_rightActionPerformed

    private void txt_health_pointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_health_pointsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_health_pointsActionPerformed

    private void txt_init_bonusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_init_bonusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_init_bonusActionPerformed

    private void txt_speed_bonusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_speed_bonusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_speed_bonusActionPerformed

    private void defense_switch_leftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defense_switch_leftActionPerformed
        defense.previousCard();
        lbl_deck_defense_name.setText(defense.getCardName());
    }//GEN-LAST:event_defense_switch_leftActionPerformed

    private void defense_switch_rightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defense_switch_rightActionPerformed
        defense.nextCard();
        lbl_deck_defense_name.setText(defense.getCardName());
    }//GEN-LAST:event_defense_switch_rightActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        offense.previousCard();
        lbl_weapon_title.setText(offense.getCardName());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        offense.nextCard();
        lbl_weapon_title.setText(offense.getCardName());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void combo_levelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_levelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_levelActionPerformed

    private void combo_levelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_levelItemStateChanged
        Object item = evt.getItem();
        if(item.getClass().equals(String.class)){
            manager.validateDataChange(KEY.K_LEVEL, (String) item);
        }
    }//GEN-LAST:event_combo_levelItemStateChanged

    private void lbl_characterImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_characterImageMouseClicked
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "JPG Images", "jpg");
        chooser.setFileFilter(filter);
        int condition = chooser.showOpenDialog(null);
        if(condition == JFileChooser.APPROVE_OPTION){
            setLblImageToFile(chooser.getSelectedFile());
        }
    }//GEN-LAST:event_lbl_characterImageMouseClicked

    private void open_inventoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_open_inventoryMouseClicked
        if(inventory == null){
            inventory = new InventoryFrame();
        }
        hideAllWindows();
        inventory.setVisible(true);
    }//GEN-LAST:event_open_inventoryMouseClicked

    private void open_spellbookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_open_spellbookMouseClicked
        if(spellbook == null){
            spellbook = new SpellbookFrame();
        }
        hideAllWindows();
        spellbook.setVisible(true);
    }//GEN-LAST:event_open_spellbookMouseClicked

    private void open_backgroundMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_open_backgroundMouseClicked
        if(background == null){
            background = new BackgroundFrame();
        }
        hideAllWindows();
        background.setVisible(true);
    }//GEN-LAST:event_open_backgroundMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        manager.goToMainMenu();
    }//GEN-LAST:event_jMenuItem1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem action_save_as;
    private javax.swing.JPanel bdy_attributes;
    private javax.swing.JPanel bdy_charInfo;
    private javax.swing.JPanel bdy_features;
    private javax.swing.JPanel bdy_skills_swap;
    private javax.swing.JButton btn_skills_left;
    private javax.swing.JButton btn_skills_right;
    private javax.swing.JCheckBox chk_cha_prof;
    private javax.swing.JCheckBox chk_con_prof;
    private javax.swing.JCheckBox chk_dex_prof;
    private javax.swing.JCheckBox chk_int_prof;
    private javax.swing.JCheckBox chk_str_prof;
    private javax.swing.JCheckBox chk_wis_prof;
    private javax.swing.JComboBox<String> combo_level;
    private javax.swing.JPanel deck_defense;
    private javax.swing.JPanel deck_skillsProfs;
    private javax.swing.JPanel deck_weapons;
    private javax.swing.JButton defense_switch_left;
    private javax.swing.JButton defense_switch_right;
    private javax.swing.JPanel defense_title;
    private javax.swing.JMenuItem item_about;
    private javax.swing.JMenuItem item_new;
    private javax.swing.JMenuItem item_open;
    private javax.swing.JMenuItem item_options;
    private javax.swing.JMenuItem item_save;
    private javax.swing.JMenuItem item_support;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lbl_alignment;
    private javax.swing.JLabel lbl_charHeight;
    private javax.swing.JLabel lbl_charInfo;
    private javax.swing.JLabel lbl_charName;
    private javax.swing.JLabel lbl_charSize;
    private javax.swing.JLabel lbl_charWeight;
    private javax.swing.JLabel lbl_characterImage;
    private javax.swing.JLabel lbl_charisma_modifier;
    private javax.swing.JLabel lbl_className;
    private javax.swing.JLabel lbl_constitutionModifier;
    private javax.swing.JLabel lbl_constitutionModifierTitle;
    private javax.swing.JLabel lbl_constitutionTitle;
    private javax.swing.JLabel lbl_currSkilsProfsName;
    private javax.swing.JLabel lbl_deck_defense_name;
    private javax.swing.JLabel lbl_deity;
    private javax.swing.JLabel lbl_dex_bonus_title;
    private javax.swing.JLabel lbl_dexterityModifier;
    private javax.swing.JLabel lbl_dexterityModifierTitle;
    private javax.swing.JLabel lbl_dexterityTitle;
    private javax.swing.JLabel lbl_health_points_title;
    private javax.swing.JLabel lbl_health_title;
    private javax.swing.JLabel lbl_hit_die_title;
    private javax.swing.JLabel lbl_init_bonus_title;
    private javax.swing.JLabel lbl_init_dex_bonus;
    private javax.swing.JLabel lbl_init_name;
    private javax.swing.JLabel lbl_init_total;
    private javax.swing.JLabel lbl_intelligence_modifier;
    private javax.swing.JLabel lbl_level;
    private javax.swing.JLabel lbl_panAttributes;
    private javax.swing.JLabel lbl_panCombat;
    private javax.swing.JLabel lbl_panFeatures;
    private javax.swing.JLabel lbl_panSkillsProfs;
    private javax.swing.JLabel lbl_passive_perception;
    private javax.swing.JLabel lbl_passive_perception_name;
    private javax.swing.JLabel lbl_plus_sign;
    private javax.swing.JLabel lbl_plus_sign2;
    private javax.swing.JLabel lbl_plus_sign4;
    private javax.swing.JLabel lbl_plus_sign_3;
    private javax.swing.JLabel lbl_raceName;
    private javax.swing.JLabel lbl_speed_base;
    private javax.swing.JLabel lbl_speed_base_title;
    private javax.swing.JLabel lbl_speed_bonus_title;
    private javax.swing.JLabel lbl_speed_name;
    private javax.swing.JLabel lbl_speed_total;
    private javax.swing.JLabel lbl_strengthModifier;
    private javax.swing.JLabel lbl_strengthModifierTitle;
    private javax.swing.JLabel lbl_strengthTitle;
    private javax.swing.JLabel lbl_util_title;
    private javax.swing.JLabel lbl_weapon_title;
    private javax.swing.JLabel lbl_wisdom_modifier;
    private javax.swing.JMenuBar menu_bar;
    private javax.swing.JMenu menu_file;
    private javax.swing.JMenu menu_help;
    private javax.swing.JMenu menu_tools;
    private javax.swing.JLabel open_background;
    private javax.swing.JLabel open_inventory;
    private javax.swing.JLabel open_spellbook;
    private javax.swing.JPanel pan_attributes;
    private javax.swing.JPanel pan_biography;
    private javax.swing.JPanel pan_charInfo;
    private javax.swing.JPanel pan_charisma;
    private javax.swing.JPanel pan_combat;
    private javax.swing.JPanel pan_combatBody;
    private javax.swing.JPanel pan_conBody;
    private javax.swing.JPanel pan_constituion;
    private javax.swing.JPanel pan_defense;
    private javax.swing.JPanel pan_dexBody;
    private javax.swing.JPanel pan_dexterity;
    private javax.swing.JPanel pan_features;
    private javax.swing.JPanel pan_health;
    private javax.swing.JPanel pan_health_body;
    private javax.swing.JPanel pan_initiative;
    private javax.swing.JPanel pan_intelligence;
    private javax.swing.JPanel pan_main;
    private javax.swing.JPanel pan_offense;
    private javax.swing.JPanel pan_pass_perception;
    private javax.swing.JPanel pan_photo;
    private javax.swing.JPanel pan_skills;
    private javax.swing.JPanel pan_speed;
    private javax.swing.JPanel pan_strBody;
    private javax.swing.JPanel pan_strength;
    private javax.swing.JPanel pan_util_body;
    private javax.swing.JPanel pan_utility;
    private javax.swing.JPanel pan_wisdom;
    private javax.swing.JLabel prof_cha_save;
    private javax.swing.JLabel prof_con_save;
    private javax.swing.JLabel prof_dex_save;
    private javax.swing.JLabel prof_intel_save;
    private javax.swing.JLabel prof_str_save;
    private javax.swing.JLabel prof_wis_save;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JScrollPane scroll_feat;
    private javax.swing.JTextField txt_alignment;
    private javax.swing.JTextArea txt_area_feats;
    private javax.swing.JTextField txt_charHeight;
    private javax.swing.JTextField txt_charName;
    private javax.swing.JTextField txt_charWeight;
    private javax.swing.JTextField txt_charisma;
    private javax.swing.JTextField txt_class;
    private javax.swing.JTextField txt_constitution;
    private javax.swing.JTextField txt_deity;
    private javax.swing.JTextField txt_dexterity;
    private javax.swing.JTextField txt_health_points;
    private javax.swing.JTextField txt_hit_die;
    private javax.swing.JTextField txt_init_bonus;
    private javax.swing.JTextField txt_intelligence;
    private javax.swing.JTextField txt_race;
    private javax.swing.JTextField txt_size;
    private javax.swing.JTextField txt_speed_bonus;
    private javax.swing.JTextField txt_strength;
    private javax.swing.JTextField txt_wisdom;
    // End of variables declaration//GEN-END:variables
    
    //Card Panels
    private DefenseCard card_defense;
    private ArmorCard card_armor;
    private SkillsCard card_skills;
    private ProficienciesCard card_proficiencies;
    
    //Base 64 encoded image
    private String baseImage;
    
    private void setLblImageToFile(File selectedFile) {
        try {
            //ImageIcon photo = new ImageIcon(selectedFile.getAbsolutePath());
            //Encode
            if(selectedFile == null)
                return;
            if(!selectedFile.canRead())
                return;
            FileInputStream fis = new FileInputStream(selectedFile.getAbsolutePath());
            byte[] bytes = new byte[(int) selectedFile.length()];
            fis.read(bytes);
            baseImage = new String(Base64.getEncoder().encode(bytes), "UTF-8");
            
            loadImage();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(CharacterFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CharacterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void setLblImageToInputStream(InputStream is){
        if(is == null)
            return;
        try {
            byte[] bytes = is.readAllBytes();
            baseImage = new String(Base64.getEncoder().encode(bytes), "UTF-8");
            loadImage();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(CharacterFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CharacterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void initCardsForDefense(){
        defense = new Deck(deck_defense);
        card_defense = new DefenseCard();
        card_armor = new ArmorCard();

        defense.add(card_defense, CARD_NAME.DEFENSE);
        defense.add(card_armor, CARD_NAME.ARMOR);
        defense.display();
    }
    
    private void initCardsForSkillsProfs(){
        skillsProfs = new Deck(deck_skillsProfs);
        card_skills = new SkillsCard();
        card_proficiencies = new ProficienciesCard();
        skillsProfs.add(card_skills, CARD_NAME.SKILLS);
        skillsProfs.add(card_proficiencies, CARD_NAME.PROFICIENCIES);
        skillsProfs.display();
    }
    
    private void initCardsForSpellsInventory(){
        /**
        card_spells = new SpellsPanel();
        card_inventory = new InventoryPanel();
        deck_spellsInventory.add(card_spells, CARD.SPELLS);
        deck_spellsInventory.add(card_inventory, CARD.INVENTORY);
        CardLayout layout = (CardLayout) deck_spellsInventory.getLayout();
        layout.show(deck_spellsInventory, CARD.SPELLS);
        * */
    }
    
    private void initComponentsForUserInterfacing(){
        //Biography
        setTextListener(txt_charName, KEY.K_CHARACTER_NAME);
        setTextListener(txt_class, KEY.K_CLASS);
        setTextListener(txt_race, KEY.K_RACE);
        setTextListener(txt_size, KEY.K_SIZE);
        setTextListener(txt_charWeight, KEY.K_WEIGHT);
        setTextListener(txt_charHeight, KEY.K_HEIGHT);
        setTextListener(txt_deity, KEY.K_DEITY);
        setTextListener(txt_alignment, KEY.K_ALIGNMENT);
        
        //Attributes
        setTextListener(txt_strength, KEY.K_STRENGTH);
        setTextListener(txt_constitution, KEY.K_CONSTITUTION);
        setTextListener(txt_dexterity, KEY.K_DEXTERITY);
        setTextListener(txt_intelligence, KEY.K_INTELLIGENCE);
        setTextListener(txt_wisdom, KEY.K_WISDOM);
        setTextListener(txt_charisma, KEY.K_CHARISMA);
        
        setCheckListener(chk_str_prof);
        chk_str_prof.setName(KEY.K_STRENGTH);
        setCheckListener(chk_dex_prof);
        chk_dex_prof.setName(KEY.K_DEXTERITY);
        setCheckListener(chk_con_prof);
        chk_con_prof.setName(KEY.K_CONSTITUTION);
        setCheckListener(chk_int_prof);
        chk_int_prof.setName(KEY.K_INTELLIGENCE);
        setCheckListener(chk_wis_prof);
        chk_wis_prof.setName(KEY.K_WISDOM);
        setCheckListener(chk_cha_prof);
        chk_cha_prof.setName(KEY.K_CHARISMA);
        
        //Offense
        offense.setTextListeners();
        
        //Defense-armor
        setTextListener(card_armor.txt_description, KEY.K_ARMOR_DESCRIPTION);
        setTextListener(card_armor.txt_name, KEY.K_ARMOR_NAME);
        setTextListener(card_armor.txt_armor_class, KEY.K_ARMOR_AC);
        setTextListener(card_armor.txt_dexterity_cap, KEY.K_ARMOR_DEX_CAP);
        
        //Defense-main-defense
        setTextListener(card_defense.txt_extra_ac_bonus, KEY.K_DEFENSE_AC_EXTRA);

        //Utility
        setTextListener(txt_health_points, KEY.K_HEALTH_POINTS);
        setTextListener(txt_hit_die, KEY.K_HIT_DIE);
        setTextListener(txt_init_bonus, KEY.K_INIT_BONUS);
        setTextListener(txt_speed_bonus, KEY.K_SPEED_BONUS);
        
        //Background
        //setTextListener(txt_pers_trait, KEY.K_BACKGROUND_TRAIT);
        //setTextListener(txt_pers_bond, KEY.K_BACKGROUND_BOND);
        //setTextListener(txt_pers_ideal, KEY.K_BACKGROUND_IDEAL);
        //setTextListener(txt_pers_flaw, KEY.K_BACKGROUND_FLAW);
        
        //Skills
        card_skills.initListenerForSkills(manager);
    }

    private void setTextListener(JTextComponent component, String key) {
        component.addFocusListener(new TextFocusListener(key, component.getDocument(), manager));
    }
    
    ////////////////////////////////////////////////////////////////////////////
    ///Update the Modifiers for labels.
    public void updateModifierLabel(JLabel label, int modifier){
        if(label != null){
            label.setText(Ability.modifierToString(modifier));
        }
    }
    ////////////////////////////////////////////////////////////////////////////

    public int getMOD(String key){
        if(key != null){
            JTextField field = null;
            switch(key){
                case KEY.K_STRENGTH:field=txt_strength;break;
                case KEY.K_DEXTERITY:field=txt_dexterity;break;
                case KEY.K_CONSTITUTION:field=txt_constitution;break;
                case KEY.K_INTELLIGENCE:field=txt_intelligence;break;
                case KEY.K_WISDOM:field=txt_wisdom;break;
                case KEY.K_CHARISMA:field=txt_charisma;break;
            }
            if(field != null && DataIntegrity.isNumeric(field.getText())){
                return Ability.getModifier(Integer.parseInt(field.getText()));
            }
        }
        return 0;
    }
    
    /**
     * Updates the Attribute Panel label information
     */
    public void updateAttributePanel() {      
        updateModifierLabel(lbl_strengthModifier, getMOD(KEY.K_STRENGTH));
        updateModifierLabel(lbl_dexterityModifier, getMOD(KEY.K_DEXTERITY));
        updateModifierLabel(lbl_constitutionModifier, getMOD(KEY.K_CONSTITUTION));
        updateModifierLabel(lbl_intelligence_modifier, getMOD(KEY.K_INTELLIGENCE));
        updateModifierLabel(lbl_wisdom_modifier, getMOD(KEY.K_WISDOM));
        updateModifierLabel(lbl_charisma_modifier, getMOD(KEY.K_CHARISMA));
        
        updateAttributeProficiency(chk_str_prof, prof_str_save);
        updateAttributeProficiency(chk_dex_prof, prof_dex_save);
        updateAttributeProficiency(chk_con_prof, prof_con_save);
        updateAttributeProficiency(chk_int_prof, prof_intel_save);
        updateAttributeProficiency(chk_wis_prof, prof_wis_save);
        updateAttributeProficiency(chk_cha_prof, prof_cha_save);
        
    }
    
    public int getProficiencyBonus(){
        int level = Integer.parseInt((String) combo_level.getSelectedItem());
        if(level < 5)   return 2;
        if(level < 9)   return 3;
        if(level < 13)  return 4;
        if(level < 17)  return 5;
                        return 6;
    }

    /**
     * Updates the offensive panel information based on derived values
     */
    public void updateOffensivePanel() {
        int strength = Integer.parseInt(txt_strength.getText());
        int mod = Ability.getModifier(strength);
        int prof = getProficiencyBonus();
        //lbl_attk_str_bonus.setText(Integer.toString(mod));
        //lbl_dmg_str_bonus.setText(Integer.toString(mod));
        //attk_bonus = Integer.parseInt(txt_weapon_attk_bonus.getText()) + mod + prof;
        //dmg_bonus = Integer.parseInt(txt_weapon_damage_bonus.getText()) + mod + prof;
        //lbl_attk_bonus_total.setText(Integer.toString(attk_bonus));
        //lbl_dmg_bonus_total.setText(Integer.toString(dmg_bonus));
        offense.updateWeapons(mod, prof);
    }

    public void updateDefensePanel() {
        int dex_mod = getMOD(KEY.K_DEXTERITY);
        int wis_mod = getMOD(KEY.K_WISDOM);
        int cha_mod = getMOD(KEY.K_CHARISMA);
        int prof = getProficiencyBonus();
        int dex_cap = card_armor.getDEX_CAP();
        int ac = card_armor.getAC();
        card_defense.setArmorValues(dex_mod, dex_cap, ac);
    }

    public void updateUtilityPanel() {
        int wis_mod = getMOD(KEY.K_WISDOM);
        int dex_mod = getMOD(KEY.K_DEXTERITY);
        String init = txt_init_bonus.getText();
        
        int init_extra = DataIntegrity.isNumeric(init)?Integer.parseInt(init):0;
        
        int init_total = init_extra + dex_mod;
        int passive_perception = 10 + wis_mod;  //10 is base needs refactor
        
        lbl_init_dex_bonus.setText(Integer.toString(dex_mod));
        lbl_init_total.setText(Integer.toString(init_total));
        lbl_passive_perception.setText(Integer.toString(passive_perception));
        String speed = txt_speed_bonus.getText();
        
        
        int speed_bonus = DataIntegrity.isNumeric(speed)?Integer.parseInt(speed):0;
        int speed_total = 30 + speed_bonus;
        lbl_speed_total.setText(Integer.toString(speed_total));
    }

    public void updateSkillPanel() {
        Bundle bundle = new Bundle();
        bundle.putInteger(KEY.K_PROFICIENCY_BONUS, getProficiencyBonus());
        bundle.putInteger(KEY.K_STRENGTH, getMOD(KEY.K_STRENGTH));
        bundle.putInteger(KEY.K_DEXTERITY, getMOD(KEY.K_DEXTERITY));
        bundle.putInteger(KEY.K_CONSTITUTION, getMOD(KEY.K_CONSTITUTION));
        bundle.putInteger(KEY.K_INTELLIGENCE, getMOD(KEY.K_INTELLIGENCE));
        bundle.putInteger(KEY.K_WISDOM, getMOD(KEY.K_WISDOM));
        bundle.putInteger(KEY.K_CHARISMA, getMOD(KEY.K_CHARISMA));
        card_skills.updateSkills(bundle);
    }

    private void initCardsForWeapons() {
        offense = new WeaponDeck(deck_weapons);
        offense.add(new WeaponCard(), CARD_NAME.WEAPON_1);
        offense.add(new WeaponCard(), CARD_NAME.WEAPON_2);
        offense.add(new WeaponCard(), CARD_NAME.WEAPON_3);
        offense.display();
    }

    private void save() {
        Bundle character_info = collectCharacterData();
        manager.saveData(associatedFile, character_info);
    }

    private File saveAs() {
        try {
            return manager.getFileToSave();
        } catch (IOException ex) {
            Logger.getLogger(CharacterFrame.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    public void updateValues(Bundle character_data) {
        if(character_data.getBoolean(BuilderFrame.FROM_BUILDER)){
            setBiography(character_data);
            skillsProfs.update(character_data);
            setAttributes(character_data);
            setFeatures(character_data);
            setBackgroundValues(character_data);
            setUtility(character_data);
        }
        else{
            setImage(character_data);
            setBackgroundValues(character_data);
            setWeapons(character_data);
            setBiography(character_data);
            setAttributes(character_data);
            setDefenseArmor(character_data);
            setUtility(character_data);
            setFeatures(character_data);
            inventory.updateInventory(character_data.getInventory());
            spellbook.updateSpellbook(character_data.getSpellbook());
            skillsProfs.update(character_data);
            
        }
        SwingHelper.setScrollPositionToTop(scroll_feat);
        manager.updateValues();
    }

    private Bundle collectCharacterData() {
        Bundle b = new Bundle();
        
        //Attributes
        b.putString(KEY.K_STRENGTH, SwingHelper.extractString(txt_strength.getDocument()));
        b.putString(KEY.K_DEXTERITY, SwingHelper.extractString(txt_dexterity.getDocument()));
        b.putString(KEY.K_CONSTITUTION, SwingHelper.extractString(txt_constitution.getDocument()));
        
        //Either way works.
        b.putString(KEY.K_INTELLIGENCE, SwingHelper.extractString(txt_intelligence));
        b.putString(KEY.K_WISDOM, SwingHelper.extractString(txt_wisdom));
        b.putString(KEY.K_CHARISMA, SwingHelper.extractString(txt_charisma));     
        
        //Puts save proficiencies
        b.putString(KEY.K_STRENGTH_PROF, Boolean.toString(chk_str_prof.isSelected()));
        b.putString(KEY.K_DEXTERITY_PROF, Boolean.toString(chk_dex_prof.isSelected()));
        b.putString(KEY.K_CONSTITUTION_PROF, Boolean.toString(chk_con_prof.isSelected()));
        b.putString(KEY.K_INTELLIGENCE_PROF, Boolean.toString(chk_int_prof.isSelected()));
        b.putString(KEY.K_WISDOM_PROF, Boolean.toString(chk_wis_prof.isSelected()));
        b.putString(KEY.K_CHARISMA_PROF, Boolean.toString(chk_cha_prof.isSelected()));
        
        
        //Character Info Panel
        b.putString(KEY.K_CHARACTER_NAME, SwingHelper.extractString(txt_charName));
        b.putString(KEY.K_CLASS, SwingHelper.extractString(txt_class));
        b.putString(KEY.K_RACE, SwingHelper.extractString(txt_race));
        b.putString(KEY.K_SIZE, SwingHelper.extractString(txt_size));
        b.putString(KEY.K_WEIGHT, SwingHelper.extractString(txt_charWeight));
        b.putString(KEY.K_HEIGHT, SwingHelper.extractString(txt_charHeight));
        b.putString(KEY.K_ALIGNMENT, SwingHelper.extractString(txt_alignment));
        b.putString(KEY.K_DEITY, SwingHelper.extractString(txt_deity));
        b.putString(KEY.K_LEVEL, (String) combo_level.getSelectedItem());
        
        //Weapon 1
        for(int curr = 0; curr < 3; curr++){
            collectWeapon(curr, b);
        }
        
        //Defense
        defense.collect(b);
        
        //Utility and Survival
        b.putString(KEY.K_SPEED_BONUS, SwingHelper.extractString(txt_speed_bonus));
        b.putString(KEY.K_INIT_BONUS, SwingHelper.extractString(txt_init_bonus));
        b.putString(KEY.K_HEALTH_POINTS, SwingHelper.extractString(txt_health_points));
        b.putString(KEY.K_HIT_DIE, SwingHelper.extractString(txt_hit_die));
        
        //Skills and Proficiencies
        skillsProfs.collect(b);
        
        //Feats
        b.putString(KEY.K_FEATURES_DESCRIPTION, SwingHelper.extractString(txt_area_feats));
        
        //Spellbook
        b.putSpellbook(spellbook.getSpellbook());
        
        //Inventory
        b.putInventory(inventory.getInventory());
        
        //Background
        background.collectData(b);
        
        //Image
        if(baseImage != null){
            System.err.println("Putting baseImage in bundle");
            b.putString(KEY.K_IMAGE, baseImage);
        }
        
        //Done
        return b;
    }

    private String extractString(Document component) {
        try {
            int length = component.getLength();
            return component.getText(0, length);
        } catch (BadLocationException ex) {
            Logger.getLogger(CharacterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return KEY.NULL;
    }
    
    private String extractString(JTextComponent comp){
        if(comp != null){
            return extractString(comp.getDocument());
        }
        else{
            return "";
        }
    }

    private void setBackgroundValues(Bundle character_data) {
        background.updateData(character_data);
    }

    private void setText(JTextComponent comp, String val) {
        if(comp != null && val != null){
            comp.setText(val);
        }
    }

    private void setImage(Bundle character_data) {
        baseImage = character_data.getString(KEY.K_IMAGE);
        if(baseImage != null && !baseImage.equals("")){
            loadImage();
        }
    }

    private void loadImage() {
        try {
            //Decode
            byte[] dec = Base64.getDecoder().decode(baseImage);
            BufferedImage buff = ImageIO.read(new ByteArrayInputStream(dec));
            
            ImageIcon photo = new ImageIcon(buff);
            //https://stackoverflow.com/questions/6714045/how-to-resize-jlabel-imageicon for resizing
            Image image = photo.getImage(); // transform it
            Image newimg = image.getScaledInstance(190, 140,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
            photo = new ImageIcon(newimg);  // transform it back
            lbl_characterImage.setText("");
            lbl_characterImage.setIcon(photo);
        } catch (IOException ex) {
            Logger.getLogger(CharacterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void collectWeapon(int curr, Bundle b) {
        if(curr >= 0 && curr < 3){
            b.putString(KEY.K_WEAPON_NAME + KEY.item(curr), 
                    extractString(offense.getDocument(KEY.K_WEAPON_NAME, curr)));
            b.putString(KEY.K_WEAPON_DESCRIPTION + KEY.item(curr), 
                    extractString(offense.getDocument(KEY.K_WEAPON_DESCRIPTION, curr)));
            b.putString(KEY.K_WEAPON_DMG_BONUS + KEY.item(curr), 
                    extractString(offense.getDocument(KEY.K_WEAPON_DMG_BONUS, curr)));
            b.putString(KEY.K_WEAPON_DMG_ROLL + KEY.item(curr), 
                    extractString(offense.getDocument(KEY.K_WEAPON_DMG_ROLL, curr)));
            b.putString(KEY.K_WEAPON_ATTK_BONUS + KEY.item(curr), 
                    extractString(offense.getDocument(KEY.K_WEAPON_ATTK_BONUS, curr))
            );
        }
    }

    private void setWeapons(Bundle b) {
        String k_name = KEY.K_WEAPON_NAME;
        String k_desc = KEY.K_WEAPON_DESCRIPTION;
        String k_attkB = KEY.K_WEAPON_ATTK_BONUS;
        String k_dmgB = KEY.K_WEAPON_DMG_BONUS;
        String k_dmgR = KEY.K_WEAPON_DMG_ROLL;
        String row;
        
        String name, desc, attkB, dmgB, dmgR;
        for(int i = 0; i < 3; i++){
            row = KEY.item(i);
            offense.putDocument(k_name.concat(row), b.getString(k_name.concat(row)));
            offense.putDocument(k_desc.concat(row), b.getString(k_desc.concat(row)));
            offense.putDocument(k_attkB.concat(row), b.getString(k_attkB.concat(row)));
            offense.putDocument(k_dmgB.concat(row), b.getString(k_dmgB.concat(row)));
            offense.putDocument(k_dmgR.concat(row), b.getString(k_dmgR.concat(row)));
        }
    }

    private void setBiography(Bundle b) {
                //Attributes
  
        
        //Character Info Panel
        String name = b.getString(KEY.K_CHARACTER_NAME);
        String pClass = b.getString(KEY.K_CLASS);
        String pRace = b.getString(KEY.K_RACE);
        String size = b.getString(KEY.K_SIZE);
        String weight = b.getString(KEY.K_WEIGHT);
        String height = b.getString(KEY.K_HEIGHT);
        String align = b.getString(KEY.K_ALIGNMENT);
        String deity = b.getString(KEY.K_DEITY);
        String level = b.getString(KEY.K_LEVEL);
        
        txt_charName.setText(name);
        txt_class.setText(pClass);
        txt_race.setText(pRace);
        txt_size.setText(size);
        txt_charWeight.setText(weight);
        txt_charHeight.setText(height);
        txt_alignment.setText(align);
        txt_deity.setText(deity);
        
        if(DataIntegrity.isNumeric(level)){
            int index = Integer.parseInt(level);
            index--; //Levels start at 1 so if I'm level 1 I need to be at index 0
            if(index >= 0 && index <= 19){ //Between levels 1-20
                combo_level.setSelectedIndex(index);
            }
        }
    }

    private void setAttributes(Bundle bun) {
        String str, dex, con, intel, wis, cha;
        str = bun.getString(KEY.K_STRENGTH);
        dex = bun.getString(KEY.K_DEXTERITY);
        con = bun.getString(KEY.K_CONSTITUTION);
        intel = bun.getString(KEY.K_INTELLIGENCE);
        wis = bun.getString(KEY.K_WISDOM);
        cha = bun.getString(KEY.K_CHARISMA);
        
        setAttribute(txt_strength, str);
        setAttribute(txt_dexterity, dex);
        setAttribute(txt_constitution, con);
        setAttribute(txt_intelligence, intel);
        setAttribute(txt_wisdom, wis);
        setAttribute(txt_charisma, cha);
        
        Boolean pStr, pDex, pCon, pIntel, pWis, pCha;
        pStr = bun.getString(KEY.K_STRENGTH_PROF).equals("true");
        pDex = bun.getString(KEY.K_DEXTERITY_PROF).equals("true");
        pCon = bun.getString(KEY.K_CONSTITUTION_PROF).equals("true");
        pIntel = bun.getString(KEY.K_INTELLIGENCE_PROF).equals("true");
        pWis = bun.getString(KEY.K_WISDOM_PROF).equals("true");
        pCha = bun.getString(KEY.K_CHARISMA_PROF).equals("true");
        
        chk_str_prof.setSelected(pStr);
        chk_dex_prof.setSelected(pDex);
        chk_con_prof.setSelected(pCon);
        chk_int_prof.setSelected(pIntel);
        chk_wis_prof.setSelected(pWis);
        chk_cha_prof.setSelected(pCha);
    }
    
    private void setAttribute(JTextField attr, String num){
        if(DataIntegrity.isNumeric(num)){
            attr.setText(num);
        }
        else{
            attr.setText("10");
        }
    }


    private void setDefenseArmor(Bundle character_data) {
        defense.update(character_data);
    }

    private void setUtility(Bundle character_data) {
        String speed, init, health, hitDie;
        speed = character_data.getString(KEY.K_SPEED_BONUS);
        init = character_data.getString(KEY.K_INIT_BONUS);
        health = character_data.getString(KEY.K_HEALTH_POINTS);
         hitDie = character_data.getString(KEY.K_HIT_DIE);
        if(character_data.getBoolean(BuilderFrame.FROM_BUILDER)){
             int constitution_modifier = getMOD(KEY.K_CONSTITUTION);
             if(constitution_modifier > 0){
                 hitDie += "+" + Integer.toString(constitution_modifier);
             }
        }
       
        if(!DataIntegrity.isNumeric(speed)){
            speed = DataIntegrity.DEFAULT_ZERO_STR;
        }
        if(!DataIntegrity.isNumeric(init)){
            init = DataIntegrity.DEFAULT_ZERO_STR;
        }
        
        txt_speed_bonus.setText(speed);
        txt_init_bonus.setText(init);
        txt_health_points.setText(health);
        txt_hit_die.setText(hitDie);
    }

    private void setCheckListener(JCheckBox checkBox) {
        checkBox.addActionListener(new CheckBoxListener(manager));
    }

    private void updateAttributeProficiency(JCheckBox attr, JLabel save) {
        String total;
        if(attr.isSelected()){
            total = Integer.toString(getProficiencyBonus() + getMOD(attr.getName()));
        }
        else{
            total = Integer.toString(getMOD(attr.getName()));
        }
            
        save.setText("+".concat(total));

    }

    public void updateOthers() {
        inventory.setLimit(Integer.parseInt(extractString(txt_strength)));
        spellbook.updateSpellDC(getMOD(spellbook.getCasterType()));
    }

    private void setFeatures(Bundle character_data) {
        String desc = character_data.getString(KEY.K_FEATURES_DESCRIPTION);
        if(desc != null){
            txt_area_feats.setText(desc);
        }
    }

    private void hideAllWindows() {
        if(inventory != null)
            inventory.setVisible(false);
        if(spellbook != null)
            inventory.setVisible(false);
        if(background != null)
            background.setVisible(false);
    }
}
