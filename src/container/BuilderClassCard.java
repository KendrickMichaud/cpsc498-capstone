/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package container;

import constants.KEY;
import data_structure.Skill;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.text.Document;
import templates.ClassTemplates;
import templates.Feature;
import templates.PlayerClass;
import templates.Templates;
import util.Bundle;
import util.ChoiceMaker;
import util.SwingHelper;

/**
 *
 * @author Kendrick-Laptop
 */
public class BuilderClassCard extends javax.swing.JPanel implements CardDataHolder{

    private ClassTemplates cTemplates;
    public static final int PROF_LIMIT = 2;
    /**
     * Creates new form BuilderClassCard
     */
    public BuilderClassCard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        icon_title = new javax.swing.JLabel();
        pan_parent = new javax.swing.JPanel();
        lbl_class_guide = new javax.swing.JPanel();
        scroll_guide = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        pan_main = new javax.swing.JPanel();
        combo_classes = new javax.swing.JComboBox<>();
        scroll_desc = new javax.swing.JScrollPane();
        txt_pane_flavor = new javax.swing.JTextPane();
        lbl_select = new javax.swing.JLabel();
        lbl_profs = new javax.swing.JLabel();
        prof_1 = new javax.swing.JCheckBox();
        prof_2 = new javax.swing.JCheckBox();
        prof_3 = new javax.swing.JCheckBox();
        prof_4 = new javax.swing.JCheckBox();
        prof_5 = new javax.swing.JCheckBox();
        prof_6 = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(300, 577));
        setLayout(new java.awt.BorderLayout());

        icon_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        icon_title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ico_class_deck_title.png"))); // NOI18N
        add(icon_title, java.awt.BorderLayout.PAGE_START);

        pan_parent.setLayout(new java.awt.BorderLayout());

        lbl_class_guide.setLayout(new java.awt.BorderLayout());

        jTextPane1.setEditable(false);
        jTextPane1.setText("There are many types of classes in tabletop rpgs. From Wizards to Fighters to Druids, they primarily fall under two categories, Martial and Magic (just differing types of magic), and futher Ranged and Melee. Use the Character Analyzer to gauge your playstyle.");
        scroll_guide.setViewportView(jTextPane1);

        lbl_class_guide.add(scroll_guide, java.awt.BorderLayout.CENTER);

        pan_parent.add(lbl_class_guide, java.awt.BorderLayout.PAGE_START);

        pan_main.setLayout(null);

        combo_classes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        combo_classes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_classesItemStateChanged(evt);
            }
        });
        pan_main.add(combo_classes);
        combo_classes.setBounds(20, 40, 250, 25);

        txt_pane_flavor.setEditable(false);
        scroll_desc.setViewportView(txt_pane_flavor);

        pan_main.add(scroll_desc);
        scroll_desc.setBounds(20, 72, 250, 100);

        lbl_select.setText("Select your Class here...");
        pan_main.add(lbl_select);
        lbl_select.setBounds(20, 10, 250, 16);

        lbl_profs.setText("Proficiencies (Select 2)");
        pan_main.add(lbl_profs);
        lbl_profs.setBounds(20, 180, 360, 16);

        prof_1.setText(" Item 1");
        prof_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prof_1ActionPerformed(evt);
            }
        });
        pan_main.add(prof_1);
        prof_1.setBounds(20, 200, 260, 24);

        prof_2.setText(" Item 2");
        prof_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prof_2ActionPerformed(evt);
            }
        });
        pan_main.add(prof_2);
        prof_2.setBounds(20, 230, 300, 24);

        prof_3.setText(" Item 3");
        prof_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prof_3ActionPerformed(evt);
            }
        });
        pan_main.add(prof_3);
        prof_3.setBounds(20, 260, 330, 24);

        prof_4.setText(" Item 4");
        prof_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prof_4ActionPerformed(evt);
            }
        });
        pan_main.add(prof_4);
        prof_4.setBounds(20, 290, 340, 24);

        prof_5.setText(" Item 5");
        prof_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prof_5ActionPerformed(evt);
            }
        });
        pan_main.add(prof_5);
        prof_5.setBounds(20, 320, 350, 24);

        prof_6.setText(" Item 6");
        prof_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prof_6ActionPerformed(evt);
            }
        });
        pan_main.add(prof_6);
        prof_6.setBounds(20, 350, 350, 24);

        pan_parent.add(pan_main, java.awt.BorderLayout.CENTER);

        add(pan_parent, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void combo_classesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_classesItemStateChanged
        BuilderFrame frame = BuilderFrame.getInstance();
        frame.updateValues();
    }//GEN-LAST:event_combo_classesItemStateChanged

    private void prof_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prof_1ActionPerformed
        determineProfs();
    }//GEN-LAST:event_prof_1ActionPerformed

    private void prof_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prof_2ActionPerformed
        determineProfs();
    }//GEN-LAST:event_prof_2ActionPerformed

    private void prof_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prof_3ActionPerformed
       determineProfs();
    }//GEN-LAST:event_prof_3ActionPerformed

    private void prof_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prof_4ActionPerformed
        determineProfs();
    }//GEN-LAST:event_prof_4ActionPerformed

    private void prof_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prof_5ActionPerformed
        determineProfs();
    }//GEN-LAST:event_prof_5ActionPerformed

    private void prof_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prof_6ActionPerformed
        determineProfs();
    }//GEN-LAST:event_prof_6ActionPerformed

    @Override
    public Document extractDocument(String key) {return null;}

    @Override
    public void putDocument(String key, String value) {}

    @Override
    public void getData(Bundle b) {
    }

    @Override
    public void update(Bundle b) {
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> combo_classes;
    private javax.swing.JLabel icon_title;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JPanel lbl_class_guide;
    private javax.swing.JLabel lbl_profs;
    private javax.swing.JLabel lbl_select;
    private javax.swing.JPanel pan_main;
    private javax.swing.JPanel pan_parent;
    private javax.swing.JCheckBox prof_1;
    private javax.swing.JCheckBox prof_2;
    private javax.swing.JCheckBox prof_3;
    private javax.swing.JCheckBox prof_4;
    private javax.swing.JCheckBox prof_5;
    private javax.swing.JCheckBox prof_6;
    private javax.swing.JScrollPane scroll_desc;
    private javax.swing.JScrollPane scroll_guide;
    private javax.swing.JTextPane txt_pane_flavor;
    // End of variables declaration//GEN-END:variables

    void putTemplate(Templates templates) {
        if(templates != null && templates instanceof ClassTemplates){
            cTemplates = (ClassTemplates) templates;
            Vector<String> classNames = new Vector<>();
            cTemplates.forEach((c) -> {
                classNames.add(c.name);
            });
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel(classNames);
            combo_classes.setModel(model);
        }
    }

    public PlayerClass getSelectedClass() {
        String item = (String) combo_classes.getSelectedItem();
        for(PlayerClass c : cTemplates){
            if(c.name.equals(item))
                return c;
        }
        return null;
    }

    void updateComponents(PlayerClass cl) {
        txt_pane_flavor.setText(cl.flavorText);
        SwingHelper.setScrollPositionToTop(scroll_desc);
        ArrayList<String> profs = cl.skillProfs;
        if(profs != null){
            int size = 6;
            if(profs.size()+1 < 6){
                size = profs.size();
                for(int i = size; i < 6; i++){
                    switch(i){
                        case 0:prof_1.setVisible(false);break;
                        case 1:prof_2.setVisible(false);break;
                        case 2:prof_3.setVisible(false);break;
                        case 3:prof_4.setVisible(false);break;
                        case 4:prof_5.setVisible(false);break;
                        case 5:prof_6.setVisible(false);break;
                    }
                }
            }
            for(int i = 0; i < size; i++){
                String prof = profs.get(i);
                switch(i){
                    case 0:prof_1.setText(prof);prof_1.setVisible(true);break;
                    case 1:prof_2.setText(prof);prof_2.setVisible(true);break;
                    case 2:prof_3.setText(prof);prof_3.setVisible(true);break;
                    case 3:prof_4.setText(prof);prof_4.setVisible(true);break;
                    case 4:prof_5.setText(prof);prof_5.setVisible(true);break;
                    case 5:prof_6.setText(prof);prof_6.setVisible(true);break;
                }
            }
        }
    }

    void resetComponents() {
        txt_pane_flavor.setText("");
        prof_1.setVisible(false);
        prof_2.setVisible(false);
        prof_3.setVisible(false);
        prof_4.setVisible(false);
        prof_5.setVisible(false);
        prof_6.setVisible(false);
    }

    private void determineProfs() {
        if(numberOfSelectedProfs() == PROF_LIMIT){
            disableUnselectedProfs();
        }
        else{
            enableUnselectedProfs();
        }
    }

    private void enableUnselectedProfs() {
        changeProficiencyEnabled(prof_1, true);
        changeProficiencyEnabled(prof_2, true);
        changeProficiencyEnabled(prof_3, true);
        changeProficiencyEnabled(prof_4, true);
        changeProficiencyEnabled(prof_5, true);
        changeProficiencyEnabled(prof_6, true);
    }

    private void disableUnselectedProfs() {
        changeProficiencyEnabled(prof_1, false);
        changeProficiencyEnabled(prof_2, false);
        changeProficiencyEnabled(prof_3, false);
        changeProficiencyEnabled(prof_4, false);   
        changeProficiencyEnabled(prof_5, false);
        changeProficiencyEnabled(prof_6, false);
    }

    public int numberOfSelectedProfs() {
        int count = 0;
        count += prof_1.isSelected()?1:0;
        count += prof_2.isSelected()?1:0;
        count += prof_3.isSelected()?1:0;
        count += prof_4.isSelected()?1:0;
        count += prof_5.isSelected()?1:0;
        count += prof_6.isSelected()?1:0;
        return count;
    }

    private void changeProficiencyEnabled(JCheckBox prof, Boolean condition) {
        if(!prof.isSelected())
            prof.setEnabled(condition);
    }

    void storeInfo(Bundle character_info) {
        PlayerClass cl = getSelectedClass();
        character_info.putString(KEY.K_CLASS, cl.name);
        
        storeProf(prof_1, character_info);
        storeProf(prof_2, character_info);
        storeProf(prof_3, character_info);
        storeProf(prof_4, character_info);
        storeProf(prof_5, character_info);
        storeProf(prof_6, character_info);
        
        String equipment = character_info.getString(KEY.K_EQUIPMENT_LANG_PROFICIENCIES);
        if(equipment == null){
            equipment = "";
        }
        
        equipment = equipment.concat("-------------------").concat("\n").concat("Equipment\n");
        for(String s : cl.equipmentProfs){
            equipment = equipment.concat(s).concat("\n");
        }
        character_info.putString(KEY.K_EQUIPMENT_LANG_PROFICIENCIES, equipment);
        
        String hitDie = cl.hitDie; 
        character_info.putString(KEY.K_HIT_DIE, hitDie);
        ArrayList<String> saves = cl.savingThrows;
        if(saves != null){
            for(String s : saves){
                if(s != null){
                    String key = null;
                    switch(s){
                        case KEY.L_STRENGTH:key = KEY.K_STRENGTH_PROF;break;
                        case KEY.L_DEXTERITY:key = KEY.K_DEXTERITY_PROF;break;
                        case KEY.L_CONSTITUTION:key = KEY.K_CONSTITUTION_PROF;break;
                        case KEY.L_INTELLIGENCE:key = KEY.K_INTELLIGENCE_PROF;break;
                        case KEY.L_WISDOM:key = KEY.K_WISDOM_PROF;break;
                        case KEY.L_CHARISMA:key = KEY.K_CHARISMA_PROF;break;
                    }
                    if(key != null){
                        character_info.putString(key, "true");
                    }
                }
            }
        }
        
        ArrayList<Feature> features = cl.features;
        if(features != null){
            String feats = character_info.getString(KEY.K_FEATURES_DESCRIPTION);
            if(feats == null){
                feats = "";
            }
            feats += "Class Features\n----------------------";
            for(Feature f : features){
                String name = f.name.concat("\n");
                String desc = f.description.concat("\n");
                if(feats.equals("")){
                    feats += name.concat(desc);
                }
                else{
                    feats += "\n".concat(name).concat(desc);
                }
                
            
            }
            feats = feats.concat("--------------------------------------------\n");
            
            character_info.putString(KEY.K_FEATURES_DESCRIPTION, feats);
        }
    }

    private void storeProf(JCheckBox prof, Bundle character_info) {
        if(prof.isSelected() && prof.isVisible() && prof.isEnabled()){
            character_info.putInteger(prof.getText(), Skill.FULL_PROF);
        }
    }

    void randomize() {
        ChoiceMaker.decideComboBox(combo_classes);
        ArrayList<JCheckBox> boxes = new ArrayList<>();
        boxes.add(prof_1);
        boxes.add(prof_2);
        boxes.add(prof_3);
        boxes.add(prof_4);
        boxes.add(prof_5);
        boxes.add(prof_6);
        ChoiceMaker.decideCheckBoxes(boxes, PROF_LIMIT);
    }
    
    
}
